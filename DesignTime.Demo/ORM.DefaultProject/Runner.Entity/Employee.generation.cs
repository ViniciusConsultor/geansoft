using System;
using System.Text;

using Gean.Data;
using Gean;

namespace Runner.Entity
{
    [Serializable]
    public partial class Employee : IEntity, IJson
    {
        public int      EmployeeID          { get; set; }
        public string   LastName            { get; set; }
        public string   FirstName           { get; set; }
        public string   Title               { get; set; }
        public string   TitleOfCourtesy     { get; set; }
        public DateTime BirthDate           { get; set; }
        public DateTime HireDate            { get; set; }
        public string   Address             { get; set; }
        public string   City                { get; set; }
        public string   Region              { get; set; }
        public string   PostalCode          { get; set; }
        public string   Country             { get; set; }
        public string   HomePhone           { get; set; }
        public string   Extension           { get; set; }
        public byte[]   Photo               { get; set; }
        public string   Notes               { get; set; }
        public int      ReportsTo           { get; set; }
        public string   PhotoPath           { get; set; }

        public object PrimaryKey { get { return this.EmployeeID; } }

        public override bool Equals(object obj)
        {
            return this.PrimaryKey.Equals(obj);
        }

        public override int GetHashCode()
        {
            int code = 27;
            code = unchecked(
                code ^
                EmployeeID.GetHashCode() ^
                FirstName.GetHashCode() ^
                Title.GetHashCode() ^
                TitleOfCourtesy.GetHashCode() ^
                BirthDate.GetHashCode() ^
                HireDate.GetHashCode() ^
                Address.GetHashCode() ^
                City.GetHashCode() ^
                Region.GetHashCode() ^
                PostalCode.GetHashCode() ^
                Country.GetHashCode() ^
                HomePhone.GetHashCode() ^
                Extension.GetHashCode() ^
                Photo.GetHashCode() ^
                Notes.GetHashCode() ^
                ReportsTo.GetHashCode() ^
                PhotoPath.GetHashCode()
                );
            return code;
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("Employee Record:");
            sb.AppendLine("EmployeeID     : ").Append(EmployeeID);
            sb.AppendLine("LastName       : ").Append(LastName);
            sb.AppendLine("FirstName      : ").Append(FirstName);
            sb.AppendLine("Title          : ").Append(Title);
            sb.AppendLine("TitleOfCourtesy: ").Append(TitleOfCourtesy);
            sb.AppendLine("BirthDate      : ").Append(BirthDate);
            sb.AppendLine("HireDate       : ").Append(HireDate);
            sb.AppendLine("Address        : ").Append(Address);
            sb.AppendLine("City           : ").Append(City);
            sb.AppendLine("Region         : ").Append(Region);
            sb.AppendLine("PostalCode     : ").Append(PostalCode);
            sb.AppendLine("Country        : ").Append(Country);
            sb.AppendLine("HomePhone      : ").Append(HomePhone);
            sb.AppendLine("Extension      : ").Append(Extension);
            sb.AppendLine("Photo          : ").Append(Photo);
            sb.AppendLine("Notes          : ").Append(Notes);
            sb.AppendLine("ReportsTo      : ").Append(ReportsTo);
            sb.AppendLine("PhotoPath      : ").Append(PhotoPath);
            return sb.ToString();
        }

        #region IJson ≥…‘±

        public string SerializeObject(object obj)
        {
            throw new NotImplementedException();
        }

        public Employee DeserializeObject<Employee>(string jsonInput)
        {
            throw new NotImplementedException();
        }

        #endregion
    }
}

/*
//===============================================================================
//  Generated From - SQLite_CSharp_BaseEntity.vbgen
//
//  The supporting base class SQLiteEntity is in the Architecture directory in "dOOdads".
//  
//  This object is 'abstract' which means you need to inherit from it to be able
//  to instantiate it.  This is very easilly done. You can override properties and
//  methods in your derived class, this allows you to regenerate this class at any
//  time and not worry about overwriting custom code. 
//
//  NEVER EDIT THIS FILE.
//
//  public class YourObject :  _YourObject
//  {
//
//  }
//
//===============================================================================


// Generated by MyGeneration Version # (1.3.0.9)

using System;
using System.Data;
using System.Collections;
using System.Collections.Specialized;

using System.Data.SQLite;
using Gean.Data.SQLite;
using Gean.Data;

namespace Gean.SQLitedOOdads.Demos
{
	public abstract class _Members : SQLiteEntity
	{
		public _Members()
		{
			this.QuerySource = "Members";
			this.MappingName = "Members";
		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
		}
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		public override string GetAutoKeyColumns()
		{
			return "Id";
		}
		

		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			return this.Query.Load();
		}
	
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(string Id)
		{
			this.Where.Id.Value = Id;
			
			return this.Query.Load();
		}
		
		
		#region Parameters
		protected class Parameters
		{
			
			public static SQLiteParameter Id
			{
				get
				{
					return new SQLiteParameter("@Id", DbType.String);

				}
			}
			
			public static SQLiteParameter Guid
			{
				get
				{
                    return new SQLiteParameter("@Guid", DbType.String);

				}
			}
			
			public static SQLiteParameter MemberName
			{
				get
				{
                    return new SQLiteParameter("@MemberName", DbType.String);

				}
			}
			
			public static SQLiteParameter Password
			{
				get
				{
                    return new SQLiteParameter("@Password", DbType.String);

				}
			}
			
			public static SQLiteParameter AppendDatetime
			{
				get
				{
                    return new SQLiteParameter("@AppendDatetime", DbType.String);

				}
			}
			
			public static SQLiteParameter LoginDatetime
			{
				get
				{
                    return new SQLiteParameter("@LoginDatetime", DbType.String);

				}
			}
			
			public static SQLiteParameter LoginCount
			{
				get
				{
                    return new SQLiteParameter("@LoginCount", DbType.String);

				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string Id = "Id";
            public const string Guid = "Guid";
            public const string MemberName = "MemberName";
            public const string Password = "Password";
            public const string AppendDatetime = "AppendDatetime";
            public const string LoginDatetime = "LoginDatetime";
            public const string LoginCount = "LoginCount";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Id] = _Members.PropertyNames.Id;
					ht[Guid] = _Members.PropertyNames.Guid;
					ht[MemberName] = _Members.PropertyNames.MemberName;
					ht[Password] = _Members.PropertyNames.Password;
					ht[AppendDatetime] = _Members.PropertyNames.AppendDatetime;
					ht[LoginDatetime] = _Members.PropertyNames.LoginDatetime;
					ht[LoginCount] = _Members.PropertyNames.LoginCount;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string Id = "Id";
            public const string Guid = "Guid";
            public const string MemberName = "MemberName";
            public const string Password = "Password";
            public const string AppendDatetime = "AppendDatetime";
            public const string LoginDatetime = "LoginDatetime";
            public const string LoginCount = "LoginCount";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Id] = _Members.ColumnNames.Id;
					ht[Guid] = _Members.ColumnNames.Guid;
					ht[MemberName] = _Members.ColumnNames.MemberName;
					ht[Password] = _Members.ColumnNames.Password;
					ht[AppendDatetime] = _Members.ColumnNames.AppendDatetime;
					ht[LoginDatetime] = _Members.ColumnNames.LoginDatetime;
					ht[LoginCount] = _Members.ColumnNames.LoginCount;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string Id = "s_Id";
            public const string Guid = "s_Guid";
            public const string MemberName = "s_MemberName";
            public const string Password = "s_Password";
            public const string AppendDatetime = "s_AppendDatetime";
            public const string LoginDatetime = "s_LoginDatetime";
            public const string LoginCount = "s_LoginCount";

		}
		#endregion		
		
		#region Properties
	
		public virtual string Id
	    {
			get
	        {
				return base.Getstring(ColumnNames.Id);
			}
			set
	        {
				base.Setstring(ColumnNames.Id, value);
			}
		}

		public virtual string Guid
	    {
			get
	        {
                return base.Getstring(ColumnNames.Guid);
			}
			set
	        {
                base.Setstring(ColumnNames.Guid, value);
			}
		}

		public virtual string MemberName
	    {
			get
	        {
                return base.Getstring(ColumnNames.MemberName);
			}
			set
	        {
                base.Setstring(ColumnNames.MemberName, value);
			}
		}

		public virtual string Password
	    {
			get
	        {
                return base.Getstring(ColumnNames.Password);
			}
			set
	        {
                base.Setstring(ColumnNames.Password, value);
			}
		}

		public virtual string AppendDatetime
	    {
			get
	        {
                return base.Getstring(ColumnNames.AppendDatetime);
			}
			set
	        {
                base.Setstring(ColumnNames.AppendDatetime, value);
			}
		}

		public virtual string LoginDatetime
	    {
			get
	        {
                return base.Getstring(ColumnNames.LoginDatetime);
			}
			set
	        {
                base.Setstring(ColumnNames.LoginDatetime, value);
			}
		}

		public virtual string LoginCount
	    {
			get
	        {
                return base.Getstring(ColumnNames.LoginCount);
			}
			set
	        {
                base.Setstring(ColumnNames.LoginCount, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_Id
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Id) ? string.Empty : base.GetstringAsString(ColumnNames.Id);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Id);
				else
					this.Id = base.SetstringAsString(ColumnNames.Id, value);
			}
		}

		public virtual string s_Guid
	    {
			get
	        {
                return this.IsColumnNull(ColumnNames.Guid) ? string.Empty : base.GetstringAsString(ColumnNames.Guid);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Guid);
				else
                    this.Guid = base.SetstringAsString(ColumnNames.Guid, value);
			}
		}

		public virtual string s_MemberName
	    {
			get
	        {
                return this.IsColumnNull(ColumnNames.MemberName) ? string.Empty : base.GetstringAsString(ColumnNames.MemberName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MemberName);
				else
                    this.MemberName = base.SetstringAsString(ColumnNames.MemberName, value);
			}
		}

		public virtual string s_Password
	    {
			get
	        {
                return this.IsColumnNull(ColumnNames.Password) ? string.Empty : base.GetstringAsString(ColumnNames.Password);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Password);
				else
                    this.Password = base.SetstringAsString(ColumnNames.Password, value);
			}
		}

		public virtual string s_AppendDatetime
	    {
			get
	        {
                return this.IsColumnNull(ColumnNames.AppendDatetime) ? string.Empty : base.GetstringAsString(ColumnNames.AppendDatetime);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppendDatetime);
				else
                    this.AppendDatetime = base.SetstringAsString(ColumnNames.AppendDatetime, value);
			}
		}

		public virtual string s_LoginDatetime
	    {
			get
	        {
                return this.IsColumnNull(ColumnNames.LoginDatetime) ? string.Empty : base.GetstringAsString(ColumnNames.LoginDatetime);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LoginDatetime);
				else
                    this.LoginDatetime = base.SetstringAsString(ColumnNames.LoginDatetime, value);
			}
		}

		public virtual string s_LoginCount
	    {
			get
	        {
                return this.IsColumnNull(ColumnNames.LoginCount) ? string.Empty : base.GetstringAsString(ColumnNames.LoginCount);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LoginCount);
				else
                    this.LoginCount = base.SetstringAsString(ColumnNames.LoginCount, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BaseEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter Id
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Id, Parameters.Id);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Guid
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Guid, Parameters.Guid);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MemberName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MemberName, Parameters.MemberName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Password
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Password, Parameters.Password);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppendDatetime
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppendDatetime, Parameters.AppendDatetime);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LoginDatetime
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LoginDatetime, Parameters.LoginDatetime);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LoginCount
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LoginCount, Parameters.LoginCount);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter Id
		    {
				get
		        {
					if(_Id_W == null)
	        	    {
						_Id_W = TearOff.Id;
					}
					return _Id_W;
				}
			}

			public WhereParameter Guid
		    {
				get
		        {
					if(_Guid_W == null)
	        	    {
						_Guid_W = TearOff.Guid;
					}
					return _Guid_W;
				}
			}

			public WhereParameter MemberName
		    {
				get
		        {
					if(_MemberName_W == null)
	        	    {
						_MemberName_W = TearOff.MemberName;
					}
					return _MemberName_W;
				}
			}

			public WhereParameter Password
		    {
				get
		        {
					if(_Password_W == null)
	        	    {
						_Password_W = TearOff.Password;
					}
					return _Password_W;
				}
			}

			public WhereParameter AppendDatetime
		    {
				get
		        {
					if(_AppendDatetime_W == null)
	        	    {
						_AppendDatetime_W = TearOff.AppendDatetime;
					}
					return _AppendDatetime_W;
				}
			}

			public WhereParameter LoginDatetime
		    {
				get
		        {
					if(_LoginDatetime_W == null)
	        	    {
						_LoginDatetime_W = TearOff.LoginDatetime;
					}
					return _LoginDatetime_W;
				}
			}

			public WhereParameter LoginCount
		    {
				get
		        {
					if(_LoginCount_W == null)
	        	    {
						_LoginCount_W = TearOff.LoginCount;
					}
					return _LoginCount_W;
				}
			}

			private WhereParameter _Id_W = null;
			private WhereParameter _Guid_W = null;
			private WhereParameter _MemberName_W = null;
			private WhereParameter _Password_W = null;
			private WhereParameter _AppendDatetime_W = null;
			private WhereParameter _LoginDatetime_W = null;
			private WhereParameter _LoginCount_W = null;

			public void WhereClauseReset()
			{
				_Id_W = null;
				_Guid_W = null;
				_MemberName_W = null;
				_Password_W = null;
				_AppendDatetime_W = null;
				_LoginDatetime_W = null;
				_LoginCount_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BaseEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
		
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BaseEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter Id
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Id, Parameters.Id);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Guid
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Guid, Parameters.Guid);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MemberName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MemberName, Parameters.MemberName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Password
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Password, Parameters.Password);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppendDatetime
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppendDatetime, Parameters.AppendDatetime);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LoginDatetime
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LoginDatetime, Parameters.LoginDatetime);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LoginCount
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LoginCount, Parameters.LoginCount);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter Id
		    {
				get
		        {
					if(_Id_W == null)
	        	    {
						_Id_W = TearOff.Id;
					}
					return _Id_W;
				}
			}

			public AggregateParameter Guid
		    {
				get
		        {
					if(_Guid_W == null)
	        	    {
						_Guid_W = TearOff.Guid;
					}
					return _Guid_W;
				}
			}

			public AggregateParameter MemberName
		    {
				get
		        {
					if(_MemberName_W == null)
	        	    {
						_MemberName_W = TearOff.MemberName;
					}
					return _MemberName_W;
				}
			}

			public AggregateParameter Password
		    {
				get
		        {
					if(_Password_W == null)
	        	    {
						_Password_W = TearOff.Password;
					}
					return _Password_W;
				}
			}

			public AggregateParameter AppendDatetime
		    {
				get
		        {
					if(_AppendDatetime_W == null)
	        	    {
						_AppendDatetime_W = TearOff.AppendDatetime;
					}
					return _AppendDatetime_W;
				}
			}

			public AggregateParameter LoginDatetime
		    {
				get
		        {
					if(_LoginDatetime_W == null)
	        	    {
						_LoginDatetime_W = TearOff.LoginDatetime;
					}
					return _LoginDatetime_W;
				}
			}

			public AggregateParameter LoginCount
		    {
				get
		        {
					if(_LoginCount_W == null)
	        	    {
						_LoginCount_W = TearOff.LoginCount;
					}
					return _LoginCount_W;
				}
			}

			private AggregateParameter _Id_W = null;
			private AggregateParameter _Guid_W = null;
			private AggregateParameter _MemberName_W = null;
			private AggregateParameter _Password_W = null;
			private AggregateParameter _AppendDatetime_W = null;
			private AggregateParameter _LoginDatetime_W = null;
			private AggregateParameter _LoginCount_W = null;

			public void AggregateClauseReset()
			{
				_Id_W = null;
				_Guid_W = null;
				_MemberName_W = null;
				_Password_W = null;
				_AppendDatetime_W = null;
				_LoginDatetime_W = null;
				_LoginCount_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BaseEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
			
		
		protected override IDbCommand GetInsertCommand()
		{
			SQLiteCommand cmd = new SQLiteCommand();
			cmd.CommandType = CommandType.Text;
			cmd.CommandText =
			@"INSERT INTO [Members]
			(
				[Guid],
				[MemberName],
				[Password],
				[AppendDatetime],
				[LoginDatetime],
				[LoginCount]
			)
			VALUES
			(
				@Guid,
				@MemberName,
				@Password,
				@AppendDatetime,
				@LoginDatetime,
				@LoginCount
			)";

			CreateParameters(cmd);
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
			SQLiteCommand cmd = new SQLiteCommand();
			cmd.CommandType = CommandType.Text;
			cmd.CommandText = 
			@"UPDATE [Members] SET 
				[Guid]=@Guid,
				[MemberName]=@MemberName,
				[Password]=@Password,
				[AppendDatetime]=@AppendDatetime,
				[LoginDatetime]=@LoginDatetime,
				[LoginCount]=@LoginCount
			WHERE
				[Id]=@Id";

			CreateParameters(cmd);
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
			SQLiteCommand cmd = new SQLiteCommand();
			cmd.CommandType = CommandType.Text;
			cmd.CommandText =
			@"DELETE FROM [Members] 
			WHERE
				[Id]=@Id";

	
			SQLiteParameter p;
            
            //p = cmd.Parameters.Add(Parameters.Id);
            //p.SourceColumn = ColumnNames.Id;
            //p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SQLiteCommand cmd)
		{
			SQLiteParameter p;
		
            //p = cmd.Parameters.Add(Parameters.Id);
            //p.SourceColumn = ColumnNames.Id;
            //p.SourceVersion = DataRowVersion.Current;

            //p = cmd.Parameters.Add(Parameters.Guid);
            //p.SourceColumn = ColumnNames.Guid;
            //p.SourceVersion = DataRowVersion.Current;

            //p = cmd.Parameters.Add(Parameters.MemberName);
            //p.SourceColumn = ColumnNames.MemberName;
            //p.SourceVersion = DataRowVersion.Current;

            //p = cmd.Parameters.Add(Parameters.Password);
            //p.SourceColumn = ColumnNames.Password;
            //p.SourceVersion = DataRowVersion.Current;

            //p = cmd.Parameters.Add(Parameters.AppendDatetime);
            //p.SourceColumn = ColumnNames.AppendDatetime;
            //p.SourceVersion = DataRowVersion.Current;

            //p = cmd.Parameters.Add(Parameters.LoginDatetime);
            //p.SourceColumn = ColumnNames.LoginDatetime;
            //p.SourceVersion = DataRowVersion.Current;

            //p = cmd.Parameters.Add(Parameters.LoginCount);
            //p.SourceColumn = ColumnNames.LoginCount;
            //p.SourceVersion = DataRowVersion.Current;

			return cmd;
		}		
		
	
	}
}

*/