using System;
using System.Xml;
using System.Data;
using System.Drawing;
using System.ComponentModel;
using System.Windows.Forms;

namespace Gean.Client.Log4NetEditor
{
	/// <summary>
	/// frmLogger ªººK­n´y­z¡C
	/// </summary>
	public class frmLogger : Form
	{
		#region WinForm Controls
		private Button btnAdd;
		private Button btnCancel;
		private Button btnDelete;
		private Button btnSave;
		private IContainer components;
		private ComboBox ddlAdditivity;
		private ComboBox ddlAppender;
		private ComboBox ddlLevel;
		private DataGrid dgAppenders;
		private GroupBox gbAppenderList;
		private Label lblAdditivity;
		private Label lblLevel;
		private Label lblLogger;
		private ToolTip toolTip;
		private TextBox txtLoggerName;
		#endregion

		private XmlDocument moXmlDoc;

		// Methods
		public frmLogger(XmlDocument log4net_config_XmlDoc)
		{
			InitializeComponent();
			moXmlDoc = log4net_config_XmlDoc;
			InitAppenderList();
		}
		public void EditExistedLogger(string sloggerName)
		{
			XmlNode node1 = null;
			DataTable dtAppenders = new DataTable("Appenders");
			dtAppenders.Columns.Add("Appender Name", typeof(string));
			dtAppenders.Columns.Add("Appender Type", typeof(string));
			if ("root" == sloggerName)
			{
				node1 = moXmlDoc.SelectSingleNode("//root");
				txtLoggerName.Text = "root";
			}
			else
			{
				foreach (XmlNode node2 in moXmlDoc.SelectNodes("//logger"))
				{
					if (node2.Attributes["name"].Value == sloggerName)
					{
						node1 = node2;
						txtLoggerName.Text = node1.Attributes["name"].Value;
						break;
					}
				}
			}
			if (node1 == null)
			{
				MessageBox.Show(this, "Logger(" + sloggerName + ") is not existed!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
			}
			else
			{
				ddlAdditivity.Text = (node1.Attributes["additivity"] == null) ? "true" : node1.Attributes["additivity"].Value;
				ddlLevel.Text = node1.SelectSingleNode("level").Attributes["value"].Value;
				foreach (XmlNode node3 in node1.SelectNodes("appender-ref"))
				{
					DataRow drAppender = dtAppenders.NewRow();
					drAppender[dtAppenders.Columns[0].ColumnName] = node3.Attributes["ref"].Value;
					foreach (XmlNode node4 in moXmlDoc.SelectNodes("//appender"))
					{
						if (node4.Attributes["name"].Value == node3.Attributes["ref"].Value)
						{
							drAppender[dtAppenders.Columns[1].ColumnName] = node4.Attributes["type"].Value;
							break;
						}
					}
					dtAppenders.Rows.Add(drAppender);
				}
				dgAppenders.DataSource = dtAppenders;
			}
		}

		public new DialogResult ShowDialog(IWin32Window owner)
		{
			if (dgAppenders.DataSource == null)
			{
				DataTable table1 = new DataTable("AppenderList");
				table1.Columns.Add("Name", typeof(string));
				table1.Columns.Add("Type", typeof(string));
				dgAppenders.DataSource = table1;
			}
			return base.ShowDialog(owner);
		}

		public XmlDocument Current_Log4net_config_XmlDoc
		{
			get { return moXmlDoc; }
		}

		#region Code generated by VS2003
		private void InitializeComponent()
		{
            this.components = new System.ComponentModel.Container();
            this.txtLoggerName = new System.Windows.Forms.TextBox();
            this.lblLogger = new System.Windows.Forms.Label();
            this.lblLevel = new System.Windows.Forms.Label();
            this.ddlLevel = new System.Windows.Forms.ComboBox();
            this.lblAdditivity = new System.Windows.Forms.Label();
            this.ddlAdditivity = new System.Windows.Forms.ComboBox();
            this.btnCancel = new System.Windows.Forms.Button();
            this.btnSave = new System.Windows.Forms.Button();
            this.toolTip = new System.Windows.Forms.ToolTip(this.components);
            this.dgAppenders = new System.Windows.Forms.DataGrid();
            this.ddlAppender = new System.Windows.Forms.ComboBox();
            this.gbAppenderList = new System.Windows.Forms.GroupBox();
            this.btnAdd = new System.Windows.Forms.Button();
            this.btnDelete = new System.Windows.Forms.Button();
            ((System.ComponentModel.ISupportInitialize)(this.dgAppenders)).BeginInit();
            this.gbAppenderList.SuspendLayout();
            this.SuspendLayout();
            // 
            // txtLoggerName
            // 
            this.txtLoggerName.Location = new System.Drawing.Point(117, 12);
            this.txtLoggerName.Name = "txtLoggerName";
            this.txtLoggerName.Size = new System.Drawing.Size(344, 21);
            this.txtLoggerName.TabIndex = 5;
            this.toolTip.SetToolTip(this.txtLoggerName, "Pick a logger name.");
            // 
            // lblLogger
            // 
            this.lblLogger.AutoSize = true;
            this.lblLogger.Location = new System.Drawing.Point(13, 15);
            this.lblLogger.Name = "lblLogger";
            this.lblLogger.Size = new System.Drawing.Size(77, 13);
            this.lblLogger.TabIndex = 4;
            this.lblLogger.Text = "Logger Name :";
            // 
            // lblLevel
            // 
            this.lblLevel.AutoSize = true;
            this.lblLevel.Location = new System.Drawing.Point(13, 43);
            this.lblLevel.Name = "lblLevel";
            this.lblLevel.Size = new System.Drawing.Size(98, 13);
            this.lblLevel.TabIndex = 6;
            this.lblLevel.Text = "Choose Log Level :";
            // 
            // ddlLevel
            // 
            this.ddlLevel.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddlLevel.Items.AddRange(new object[] {
            "OFF",
            "FATAL",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "ALL"});
            this.ddlLevel.Location = new System.Drawing.Point(117, 40);
            this.ddlLevel.Name = "ddlLevel";
            this.ddlLevel.Size = new System.Drawing.Size(344, 21);
            this.ddlLevel.TabIndex = 7;
            this.toolTip.SetToolTip(this.ddlLevel, "Choose a level to decide what kind of info you want to write into log.");
            // 
            // lblAdditivity
            // 
            this.lblAdditivity.AutoSize = true;
            this.lblAdditivity.Location = new System.Drawing.Point(13, 70);
            this.lblAdditivity.Name = "lblAdditivity";
            this.lblAdditivity.Size = new System.Drawing.Size(59, 13);
            this.lblAdditivity.TabIndex = 8;
            this.lblAdditivity.Text = "Additivity :";
            // 
            // ddlAdditivity
            // 
            this.ddlAdditivity.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddlAdditivity.Items.AddRange(new object[] {
            "true",
            "false"});
            this.ddlAdditivity.Location = new System.Drawing.Point(117, 67);
            this.ddlAdditivity.Name = "ddlAdditivity";
            this.ddlAdditivity.Size = new System.Drawing.Size(344, 21);
            this.ddlAdditivity.TabIndex = 9;
            this.toolTip.SetToolTip(this.ddlAdditivity, "Enable this logger or not.");
            // 
            // btnCancel
            // 
            this.btnCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
            this.btnCancel.Location = new System.Drawing.Point(305, 308);
            this.btnCancel.Name = "btnCancel";
            this.btnCancel.Size = new System.Drawing.Size(75, 29);
            this.btnCancel.TabIndex = 13;
            this.btnCancel.Text = "&Cancel";
            this.btnCancel.Click += new System.EventHandler(this.btnCancel_Click);
            // 
            // btnSave
            // 
            this.btnSave.Location = new System.Drawing.Point(386, 308);
            this.btnSave.Name = "btnSave";
            this.btnSave.Size = new System.Drawing.Size(75, 29);
            this.btnSave.TabIndex = 12;
            this.btnSave.Text = "&Save";
            this.btnSave.Click += new System.EventHandler(this.btnSave_Click);
            // 
            // dgAppenders
            // 
            this.dgAppenders.AlternatingBackColor = System.Drawing.Color.WhiteSmoke;
            this.dgAppenders.BackColor = System.Drawing.Color.Gainsboro;
            this.dgAppenders.BackgroundColor = System.Drawing.Color.DarkGray;
            this.dgAppenders.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.dgAppenders.CaptionBackColor = System.Drawing.Color.DarkKhaki;
            this.dgAppenders.CaptionFont = new System.Drawing.Font("Tahoma", 8F, System.Drawing.FontStyle.Bold);
            this.dgAppenders.CaptionForeColor = System.Drawing.Color.Black;
            this.dgAppenders.CaptionText = "Appender List";
            this.dgAppenders.CaptionVisible = false;
            this.dgAppenders.DataMember = "";
            this.dgAppenders.FlatMode = true;
            this.dgAppenders.Font = new System.Drawing.Font("Times New Roman", 9F);
            this.dgAppenders.ForeColor = System.Drawing.Color.Black;
            this.dgAppenders.GridLineColor = System.Drawing.Color.Silver;
            this.dgAppenders.HeaderBackColor = System.Drawing.Color.Black;
            this.dgAppenders.HeaderFont = new System.Drawing.Font("Tahoma", 8F, System.Drawing.FontStyle.Bold);
            this.dgAppenders.HeaderForeColor = System.Drawing.Color.White;
            this.dgAppenders.LinkColor = System.Drawing.Color.DarkSlateBlue;
            this.dgAppenders.Location = new System.Drawing.Point(13, 17);
            this.dgAppenders.Name = "dgAppenders";
            this.dgAppenders.ParentRowsBackColor = System.Drawing.Color.LightGray;
            this.dgAppenders.ParentRowsForeColor = System.Drawing.Color.Black;
            this.dgAppenders.PreferredColumnWidth = 180;
            this.dgAppenders.PreferredRowHeight = 23;
            this.dgAppenders.ReadOnly = true;
            this.dgAppenders.SelectionBackColor = System.Drawing.Color.Firebrick;
            this.dgAppenders.SelectionForeColor = System.Drawing.Color.White;
            this.dgAppenders.Size = new System.Drawing.Size(426, 151);
            this.dgAppenders.TabIndex = 0;
            this.toolTip.SetToolTip(this.dgAppenders, "List current appenders used for this logger.");
            this.dgAppenders.CurrentCellChanged += new System.EventHandler(this.dgAppenders_CurrentCellChanged);
            // 
            // ddlAppender
            // 
            this.ddlAppender.DisplayMember = "Name";
            this.ddlAppender.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddlAppender.Items.AddRange(new object[] {
            "true",
            "false"});
            this.ddlAppender.Location = new System.Drawing.Point(29, 32);
            this.ddlAppender.Name = "ddlAppender";
            this.ddlAppender.Size = new System.Drawing.Size(394, 21);
            this.ddlAppender.TabIndex = 15;
            this.toolTip.SetToolTip(this.ddlAppender, "Choose what appender you want to use, PRESS [Enter] to confirm");
            this.ddlAppender.ValueMember = "Type";
            this.ddlAppender.Visible = false;
            this.ddlAppender.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.ddlAppender_KeyPress);
            // 
            // gbAppenderList
            // 
            this.gbAppenderList.Controls.Add(this.btnAdd);
            this.gbAppenderList.Controls.Add(this.btnDelete);
            this.gbAppenderList.Controls.Add(this.ddlAppender);
            this.gbAppenderList.Controls.Add(this.dgAppenders);
            this.gbAppenderList.Location = new System.Drawing.Point(16, 94);
            this.gbAppenderList.Name = "gbAppenderList";
            this.gbAppenderList.Size = new System.Drawing.Size(445, 208);
            this.gbAppenderList.TabIndex = 14;
            this.gbAppenderList.TabStop = false;
            this.gbAppenderList.Text = "Appender List";
            // 
            // btnAdd
            // 
            this.btnAdd.Location = new System.Drawing.Point(273, 174);
            this.btnAdd.Name = "btnAdd";
            this.btnAdd.Size = new System.Drawing.Size(80, 23);
            this.btnAdd.TabIndex = 17;
            this.btnAdd.Text = "&Add";
            this.btnAdd.Click += new System.EventHandler(this.btnAdd_Click);
            // 
            // btnDelete
            // 
            this.btnDelete.Location = new System.Drawing.Point(359, 174);
            this.btnDelete.Name = "btnDelete";
            this.btnDelete.Size = new System.Drawing.Size(80, 23);
            this.btnDelete.TabIndex = 16;
            this.btnDelete.Text = "&Delete";
            this.btnDelete.Click += new System.EventHandler(this.btnDelete_Click);
            // 
            // frmLogger
            // 
            this.AutoScaleBaseSize = new System.Drawing.Size(5, 14);
            this.ClientSize = new System.Drawing.Size(478, 357);
            this.Controls.Add(this.gbAppenderList);
            this.Controls.Add(this.btnCancel);
            this.Controls.Add(this.btnSave);
            this.Controls.Add(this.lblAdditivity);
            this.Controls.Add(this.lblLevel);
            this.Controls.Add(this.txtLoggerName);
            this.Controls.Add(this.lblLogger);
            this.Controls.Add(this.ddlAdditivity);
            this.Controls.Add(this.ddlLevel);
            this.Font = new System.Drawing.Font("Tahoma", 8.25F);
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
            this.MaximizeBox = false;
            this.MinimizeBox = false;
            this.Name = "frmLogger";
            this.ShowIcon = false;
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterParent;
            this.Text = "Log4net Logger Editor";
            ((System.ComponentModel.ISupportInitialize)(this.dgAppenders)).EndInit();
            this.gbAppenderList.ResumeLayout(false);
            this.ResumeLayout(false);
            this.PerformLayout();

		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && (components != null))
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		#endregion
		private void btnAdd_Click(object sender, EventArgs e)
		{
			DataTable table1 = (DataTable) dgAppenders.DataSource;
			DataRow row1 = table1.NewRow();
			row1[0] = string.Empty;
			row1[1] = string.Empty;
			table1.Rows.Add(row1);
		}

		private void btnCancel_Click(object sender, EventArgs e)
		{
			base.Close();
			base.Dispose();
		}

		private void btnDelete_Click(object sender, EventArgs e)
		{
			DataTable table1 = (DataTable) dgAppenders.DataSource;
			foreach (DataRow row1 in table1.Rows)
			{
				if (((string) dgAppenders[dgAppenders.CurrentCell.RowNumber, 0]) == ((string) row1[table1.Columns[0].ColumnName]))
				{
					table1.Rows.Remove(row1);
					return;
				}
			}
		}

		private void btnSave_Click(object sender, EventArgs e)
		{
			XmlNode node1 = null;
			string text1 = txtLoggerName.Text;
			bool flag1 = false;

			#region Search this logger node
			if ("root" == text1)
			{
				node1 = moXmlDoc.SelectSingleNode("//root");
			}
			else
			{
				foreach (XmlNode node2 in moXmlDoc.SelectNodes("//logger"))
				{
					if (node2.Attributes["name"].Value == text1)
					{
						node1 = node2;
						break;
					}
				}
			}
			#endregion

			try
			{
				if (node1 == null)
				{
					#region Create new logger node
					flag1 = true;
					if ("root" == text1)
					{
						node1 = moXmlDoc.CreateElement("root");
					}
					else
					{
						node1 = moXmlDoc.CreateElement("logger");
						XmlAttribute attribute1 = moXmlDoc.CreateAttribute("name");
						attribute1.Value = text1;
						node1.Attributes.Append(attribute1);

						attribute1 = moXmlDoc.CreateAttribute("additivity");
						attribute1.Value = ddlAdditivity.Text;
						node1.Attributes.Append(attribute1);
					}
					XmlElement element1 = moXmlDoc.CreateElement("level");
					XmlAttribute attribute2 = moXmlDoc.CreateAttribute("value");
					attribute2.Value = ddlLevel.Text;
					element1.Attributes.Append(attribute2);
					node1.AppendChild(element1);
					#endregion
				}
				else
				{
					flag1 = false;
					node1.RemoveAll();
					XmlAttribute attribute3 = moXmlDoc.CreateAttribute("name");
					attribute3.Value = text1;
					node1.Attributes.Append(attribute3);

					attribute3 = moXmlDoc.CreateAttribute("additivity");
					attribute3.Value = ddlAdditivity.Text;
					node1.Attributes.Append(attribute3);

					XmlNode node3 = node1.SelectSingleNode("level");
					if (node3 != null)
					{
						node3.Attributes["value"].Value = ddlLevel.Text;
					}
					else
					{
						node3 = moXmlDoc.CreateElement("level");
						XmlAttribute attribute4 = moXmlDoc.CreateAttribute("value");
						attribute4.Value = ddlLevel.Text;
						node3.Attributes.Append(attribute4);
						node1.AppendChild(node3);
					}
				}
				foreach (DataRow row1 in ((DataTable) dgAppenders.DataSource).Rows)
				{
					XmlNode node4 = moXmlDoc.CreateElement("appender-ref");
					XmlAttribute attribute5 = moXmlDoc.CreateAttribute("ref");
					attribute5.Value = (string) row1[0];
					node4.Attributes.Append(attribute5);
					node1.AppendChild(node4);
				}
				if (flag1)
				{
					moXmlDoc.DocumentElement.InsertAfter(node1, moXmlDoc.DocumentElement.LastChild);
				}
			}
			catch (Exception oEX)
			{
				MessageBox.Show(this, oEX.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
				return;
			}

			DialogResult = DialogResult.OK;
			base.Close();
		}

		private void ddlAppender_KeyPress(object sender, KeyPressEventArgs e)
		{
			UpdateDgAppendersWithDdlAppender();
		}

		private void dgAppenders_CurrentCellChanged(object sender, EventArgs e)
		{
			DataGridCell cell1 = dgAppenders.CurrentCell;
			if (cell1.ColumnNumber == 0)
			{
				Rectangle rectangle1 = dgAppenders.GetCurrentCellBounds();
				ddlAppender.Top = rectangle1.Top + dgAppenders.Top;
				ddlAppender.Left = rectangle1.Left + dgAppenders.Left;
				ddlAppender.Width = rectangle1.Width;
				ddlAppender.Height = rectangle1.Height;
				ddlAppender.Text = (string) dgAppenders[cell1];
				ddlAppender.Visible = true;
				ddlAppender.Focus();
			}
			else
			{
				ddlAppender.Visible = false;
			}
		}

		private void InitAppenderList()
		{
			DataTable table1 = new DataTable("AppenderList");
			table1.Columns.Add("Name", typeof(string));
			table1.Columns.Add("Type", typeof(string));
			XmlNodeList list1 = moXmlDoc.SelectNodes("//appender");
			foreach (XmlNode node1 in list1)
			{
				DataRow row1 = table1.NewRow();
				row1[table1.Columns[0].ColumnName] = node1.Attributes["name"].Value;
				row1[table1.Columns[1].ColumnName] = node1.Attributes["type"].Value;
				table1.Rows.Add(row1);
			}
			ddlAppender.DataSource = table1;
		}

		private void UpdateDgAppendersWithDdlAppender()
		{
			DataGridCell cell1 = dgAppenders.CurrentCell;
			dgAppenders[cell1] = ddlAppender.Text;
			dgAppenders[cell1.RowNumber, cell1.ColumnNumber + 1] = ddlAppender.SelectedValue;
			ddlAppender.Visible = false;
		}
	}
}
