//========================================================================
// This file was generated using the MyGeneration tool in combination
// with the Gentle.NET Business Entity template, $Rev: 1198 $
//========================================================================
using System;
using System.Collections;
using Gentle.Common;
using Gentle.Framework;

namespace Gean.EastOfArt.Data
{
    /// <summary>
    /// Instances of this class represent the properties and methods of a row in the table <b>ImageRecords</b>.
    /// </summary>
    [TableName("ImageRecords", CacheStrategy.Temporary)]
    public partial class ImageRecords : Persistent
    {
        #region Members
        private bool isChanged;
        [TableColumn("Id", NotNull = true), PrimaryKey(AutoGenerated = true)]
        private Unknown id;
        [TableColumn("Guid", NotNull = true)]
        private Unknown guid;
        [TableColumn("Path", NotNull = true)]
        private Unknown path;
        [TableColumn("Name", NotNull = true)]
        private Unknown name;
        [TableColumn("AppendDatetime", NotNull = true)]
        private Unknown appendDatetime;
        [TableColumn("ModifyDatetime", NotNull = true)]
        private Unknown modifyDatetime;
        [TableColumn("Author", NullValue = 0)]
        private Unknown author;
        [TableColumn("Dynasty", NullValue = 0)]
        private Unknown dynasty;
        #endregion

        #region Constructors
        /// <summary>
        /// Create a new instance using the default constructor
        /// </summary>
        private ImageRecords()
        {
            isChanged = false;
        }

        /// <summary> 
        /// Create a new object using the minimum required information
        /// (all not-null fields except auto-generated primary keys). 
        /// </summary> 
        public ImageRecords(Unknown guid, Unknown path, Unknown name, Unknown appendDatetime, Unknown modifyDatetime)
        {
            isChanged = true;
            this.guid = guid;
            this.path = path;
            this.name = name;
            this.appendDatetime = appendDatetime;
            this.modifyDatetime = modifyDatetime;
        }

        /// <summary> 
        /// Create a new object by specifying all fields (except the auto-generated primary key field). 
        /// </summary> 
        public ImageRecords(Unknown guid, Unknown path, Unknown name, Unknown appendDatetime, Unknown modifyDatetime, Unknown author, Unknown dynasty)
        {
            isChanged = true;
            this.guid = guid;
            this.path = path;
            this.name = name;
            this.appendDatetime = appendDatetime;
            this.modifyDatetime = modifyDatetime;
            this.author = author;
            this.dynasty = dynasty;
        }

        /// <summary> 
        /// Create an object from an existing row of data. This will be used by Gentle to 
        /// construct objects from retrieved rows. 
        /// </summary> 
        public ImageRecords(Unknown id, Unknown guid, Unknown path, Unknown name, Unknown appendDatetime, Unknown modifyDatetime, Unknown author, Unknown dynasty)
        {
            this.id = id;
            this.guid = guid;
            this.path = path;
            this.name = name;
            this.appendDatetime = appendDatetime;
            this.modifyDatetime = modifyDatetime;
            this.author = author;
            this.dynasty = dynasty;
        }
        #endregion

        #region Empty Reference Object

        public static readonly ImageRecords Empty = new ImageRecords();

        #endregion // Empty Reference Object

        #region Public Properties
        /// <summary>
        /// Indicates whether the entity is changed and requires saving or not.
        /// </summary>
        public bool IsChanged
        {
            get { return isChanged; }
        }

        public bool IsEmpty
        {
            get { return Empty.Equals(this); }
        }


        /// <summary>
        /// Property relating to database column Id
        /// </summary>
        public Unknown Id
        {
            get { return id; }
        }

        /// <summary>
        /// Property relating to database column Guid
        /// </summary>
        public Unknown Guid
        {
            get { return guid; }
            set { if (IsEmpty) return; isChanged |= guid != value; guid = value; }
        }

        /// <summary>
        /// Property relating to database column Path
        /// </summary>
        public Unknown Path
        {
            get { return path; }
            set { if (IsEmpty) return; isChanged |= path != value; path = value; }
        }

        /// <summary>
        /// Property relating to database column Name
        /// </summary>
        public Unknown Name
        {
            get { return name; }
            set { if (IsEmpty) return; isChanged |= name != value; name = value; }
        }

        /// <summary>
        /// Property relating to database column AppendDatetime
        /// </summary>
        public Unknown AppendDatetime
        {
            get { return appendDatetime; }
            set { if (IsEmpty) return; isChanged |= appendDatetime != value; appendDatetime = value; }
        }

        /// <summary>
        /// Property relating to database column ModifyDatetime
        /// </summary>
        public Unknown ModifyDatetime
        {
            get { return modifyDatetime; }
            set { if (IsEmpty) return; isChanged |= modifyDatetime != value; modifyDatetime = value; }
        }

        /// <summary>
        /// Property relating to database column Author
        /// </summary>
        public Unknown Author
        {
            get { return author; }
            set { if (IsEmpty) return; isChanged |= author != value; author = value; }
        }

        /// <summary>
        /// Property relating to database column Dynasty
        /// </summary>
        public Unknown Dynasty
        {
            get { return dynasty; }
            set { if (IsEmpty) return; isChanged |= dynasty != value; dynasty = value; }
        }
        #endregion

        #region Storage and Retrieval

        /// <summary>
        /// Static method to retrieve all <b>ImageRecords</b> instances matching the key in one call
        /// </summary>
        public static IList ListAll()
        {
            return Broker.RetrieveList(typeof(ImageRecords));
        }

        /// <summary>
        /// Retrieves an <b>ImageRecords</b> entity given it's id.
        /// </summary>
        public static ImageRecords Retrieve(Unknown Id)
        {
            Key pk = new Key(true);
            pk.Add("Id", Id);
            ImageRecords tmp = Broker.RetrieveInstance(typeof(ImageRecords), pk) as ImageRecords;
            return (null != tmp) ? tmp : Empty;
        }

        /// <summary>
        /// Retrieves an <b>ImageRecords</b> entity given it's id, using Gentle.Persistence.ObjectIdentity class.
        /// This allows retrieval based on multi-column keys.
        /// </summary>
        public static ImageRecords Retrieve(Key key)
        {
            ImageRecords tmp = Broker.RetrieveInstance(typeof(ImageRecords), key) as ImageRecords;
            return (null != tmp) ? tmp : Empty;
        }

        /// <summary>
        /// Persists the current <b>ImageRecords</b> entity if it was never persisted or was changed.
        /// </summary>
        public override void Persist()
        {
            if ((IsChanged || !IsPersisted) && !IsEmpty)
            {
                base.Persist();
                isChanged = false;
            }
        }

        /// <summary>
        /// Remove the current <b>ImageRecords</b> entity from the database.
        /// </summary>
        public override void Remove()
        {
            if (IsEmpty) return;
            base.Remove();
        }

        #endregion
    }
}
