//========================================================================
// This file was generated using the MyGeneration tool in combination
// with the Gentle.NET Business Entity template, $Rev: 1198 $
//========================================================================
using System;
using System.Collections;
using Gentle.Common;
using Gentle.Framework;

namespace Gean.EastOfArt.Data
{
	/// <summary>
	/// Instances of this class represent the properties and methods of a row in the table <b>Members</b>.
	/// </summary>
	[TableName("Members", CacheStrategy.Temporary)]
	public partial class Members : Persistent
	{
		#region Members
		private bool isChanged;
		[TableColumn("Id", NotNull=true), PrimaryKey(AutoGenerated=true)]
		private Unknown id;
		[TableColumn("User", NotNull=true)]
		private Unknown user;
		[TableColumn("Nickname", NotNull=true)]
		private Unknown nickname;
		[TableColumn("Password", NotNull=true)]
		private Unknown password;
		#endregion
			
		#region Constructors
		/// <summary>
		/// Create a new instance using the default constructor
		/// </summary>
		private Members()
		{
			isChanged = false;
		}

		/// <summary> 
		/// Create a new object by specifying all fields (except the auto-generated primary key field). 
		/// </summary> 
		public Members(Unknown user, Unknown nickname, Unknown password)
		{
			isChanged = true;
			this.user = user;
			this.nickname = nickname;
			this.password = password;
		}
			
		/// <summary> 
		/// Create an object from an existing row of data. This will be used by Gentle to 
		/// construct objects from retrieved rows. 
		/// </summary> 
		public Members(Unknown id, Unknown user, Unknown nickname, Unknown password)
		{
			this.id = id;
			this.user = user;
			this.nickname = nickname;
			this.password = password;
		}
		#endregion

		#region Empty Reference Object
		
		public static readonly Members Empty = new Members();
		
		#endregion // Empty Reference Object
		
		#region Public Properties
		/// <summary>
		/// Indicates whether the entity is changed and requires saving or not.
		/// </summary>
		public bool IsChanged
		{
			get { return isChanged; }
		}

		public bool IsEmpty
		{
			get { return Empty.Equals(this); }
		}		
		

		/// <summary>
		/// Property relating to database column Id
		/// </summary>
		public Unknown Id
		{
			get { return id; }
		}

		/// <summary>
		/// Property relating to database column User
		/// </summary>
		public Unknown User
		{
			get { return user; }
			set { if (IsEmpty) return;  isChanged |= user != value; user = value; }
		}

		/// <summary>
		/// Property relating to database column Nickname
		/// </summary>
		public Unknown Nickname
		{
			get { return nickname; }
			set { if (IsEmpty) return;  isChanged |= nickname != value; nickname = value; }
		}

		/// <summary>
		/// Property relating to database column Password
		/// </summary>
		public Unknown Password
		{
			get { return password; }
			set { if (IsEmpty) return;  isChanged |= password != value; password = value; }
		}
		#endregion

		#region Storage and Retrieval
	
		/// <summary>
		/// Static method to retrieve all <b>Members</b> instances matching the key in one call
		/// </summary>
		public static IList ListAll()
		{
			return Broker.RetrieveList(typeof(Members));
		}

 
		/// <summary>
		/// Retrieves an <b>Members</b> entity given it's id.
		/// </summary>
		public static Members Retrieve(Unknown Id)
		{
			Key pk = new Key(true);
			pk.Add("Id", Id);
			Members tmp = Broker.RetrieveInstance(typeof(Members), pk) as Members;
			return (null != tmp) ? tmp : Empty;
		}
		
		/// <summary>
		/// Retrieves an <b>Members</b> entity given it's id, using Gentle.Persistence.ObjectIdentity class.
		/// This allows retrieval based on multi-column keys.
		/// </summary>
		public static Members Retrieve(Key key)
		{
			Members tmp =  Broker.RetrieveInstance(typeof(Members), key) as Members;
			return (null != tmp) ? tmp : Empty;
		}
		
		/// <summary>
		/// Persists the current <b>Members</b> entity if it was never persisted or was changed.
		/// </summary>
		public override void Persist()
		{
			if ( (IsChanged || !IsPersisted) && !IsEmpty )
			{
				base.Persist();
				isChanged = false;
			}
		}

		/// <summary>
		/// Remove the current <b>Members</b> entity from the database.
		/// </summary>
		public override void Remove()
		{
			if (IsEmpty) return; 
			base.Remove();
		}
		#endregion
	}
}
